// =========================| Utility classes: Panels |========================= //



//--------------------------| Data

$util-panels: (
  'paper': (
    'background': map-get($roles-col-backgrounds, 'paper'),
    'shadow': map-get($roles-shadows, 'panel')
  ),
  'glass': (
    'shadow': map-get($roles-shadows, 'panel'),
    'border': 1px solid map-get($reg-colors, 'white')
  )
);


//--------------------------| Generator

@for $p from 1 through length($util-panels) {
  $name: nth(nth($util-panels, $p), 1);
  $value: map-get($util-panels, $name);

  .ut-panel-#{$name} {
    $bgr: map-get($value, 'background');
    $shadow: map-get($value, 'shadow');
    $border: map-get($value, 'border');

    @if $shadow {
      @include box-shadow($shadow);
    }

    @if $border {
      border: $border;
    }

    background: $bgr;
  }
}

.ut-panel-glass {
  position: relative;

  &::before,
  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    content: '';
  }

  html:not(.mobile) & {
    @include background-image($layout-bgr-image);

    background-attachment: fixed;
    background-color: $layout-bgr-color;
    background-repeat: no-repeat;
    background-size: 100% 50vh;

    &::before {
      @include filter(blur(1.3px));

      z-index: 1;
      background: url(map-get($roles-patterns, 'layout')) repeat fixed;
    }

    &::after {
      @include background-image(map-get($reg-gradients, 'blur'));

      z-index: 2;
    }
  }

  html.mobile &::after {
    @include background-image(map-get($reg-gradients, 'blur-white'));
  }

  > * {
    position: relative;
    z-index: 3;
  }
}
